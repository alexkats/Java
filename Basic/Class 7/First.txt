Методы обработки ошибок:
1) Не обрабатывать ее
2) Коды возврата
3) Установка флага ошибки
4) Вызов метода обработки ошибки
5) Завершение программы

6) Exception - класс (объект)
Все время кидается вверх
Там, где оно кидается, пытаются его обработать.

Кикие ошибки:
1) Ошибки программирования (NullPointerException - объект еще не инициализирован)
2) Неверное использование API (В библиотеке джавы есть аргументы, на которые должны накладываться какие-то условия) (InvalidArgumentException)
3) Доступ к внешним ресурсам (IOException)
4) Системные сбои (VirtualMachineError - джава не смогла запустить код)

Схемка:
Базовые интерфейсы (все разного типа поведение)
Throwable - нечто кидаемое (все объединяем)
Throwable - интерфейс (throws Throwable)
Error - произошло не по вине программы, а по вине окружающей среды (VirtualMachineError, Out of memory), не можем никак контролировать, ничего не
сделать
Exception - ошибка произошла в программе (напрямую произошла ошибка) (есть IOException (нет файла) и IOError (полетел жесткий диск))
RuntimeException - среднее между Exception и Error (почти NullPointerException) - является непроверяемым (можно игнорировать) (необязательно писать
try-catch)

Проверяемые:
try {
    // ...
} catch (*Exception e) {
    // Обработка
}

Or

void method() throws *Exception {
    ...
}

Любой код в джаве может кинуть проверяемое и непроверяемое исключение.
Error - по сути тоже непроверяемый Exception.

Можно ввести просто некий ComplexException (DBZComplexException, LogZeroComplexException, ...)

Можно ловить по отдельности
try {
    throw new LogZeroComplexException();
} catch (ComplexException e) {
    // Обработка
}

К ошибке всегда прилагается некое сообщение.
Throwable:
1) getMessage() - сообщение
2) getCause() - причина (? передать некоторый класс, который является причиной)
3) printStackTrace() - текущий стек всех вызовов в джаве
4) StackTraceElement[] getStackTrace() - вернет массив элеметнов StackTrace() - строчка, где был вызван код, он что-то там делал, потом произошел там
Exception

StackTraceElement:
1) getClassName()
2) getMethodName()
3) getFileName()
4) getLineNumber()

Пользовательский код при пользовании библиотекой не должен знать об устройстве класса
Надо обертывать исключения

Пример с исключениями:
a() вызывает b() ...







Exception - 3 types:
1) Error
2) RuntimeException
3) Exception
